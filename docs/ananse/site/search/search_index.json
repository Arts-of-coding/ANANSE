{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ANANSE : AN alysis A lgorithm for N etworks S pecified by E nhancers What is ANANSE Network? ANANSE is an analysis framework for key transcription factor prediction during cell fate switch written in Python. It contains command-line scripts to predict all TF binding network ( binding ), predict gene regulatory network ( network ) and infer influence score between two cell types(tissues) ( influence ). In addition, all this functionality is available from a Python API. ANANSE is free and open source research software. If you find it useful please cite our paper: Xu, Q., Georgiou, G., Veenstra, G.J.C., Zhou, H., and van Heeringen, S.J. (2020). ANANSE: An enhancer network-based computational approach for predicting key transcription factors in cell fate determination. https://www.biorxiv.org/ Getting started The easiest way to install ANANSE is using bioconda on Linux (include Windows Subsystem for Linux ) or Mac. Have a look at these simple examples to get a taste of what is possible. Check out the more detailed tutorials. Full command-line reference can be found here. There\u2019s also an API documentation . Get help First, check the FAQ for common issues. The preferred way to get support is through the Github issues page . Finally, you can reach me by mail or via twitter . Full contents Installation The easiest way to install Alternative installation Input data Genome Motif database Enhancer data Expression data Differential expression data Command-line reference List of tools Input formats Command: ananse binding Command: ananse network Command: ananse influence API documentation Working with binding Class Working with network Class Working with influence Class Examples Command: ananse binding Command: ananse network Command: ananse influence FAQ Sorry, motif prediction tool [X] is not supported I get motifs that have differential scores in gimme maelstrom, however, the number is not different across clusters I have upgraded GimmeMotifs and now it doesn\u2019t find my genome I cannot run gimme index anymore I get \u2018RuntimeError: Invalid DISPLAY variable\u2019 I get a KeyError when running gimme maelstrom Acknowledgments","title":"Home"},{"location":"#ananse-analysis-algorithm-for-networks-specified-by-enhancers","text":"","title":"ANANSE: ANalysis Algorithm for Networks Specified by Enhancers"},{"location":"#what-is-ananse-network","text":"ANANSE is an analysis framework for key transcription factor prediction during cell fate switch written in Python. It contains command-line scripts to predict all TF binding network ( binding ), predict gene regulatory network ( network ) and infer influence score between two cell types(tissues) ( influence ). In addition, all this functionality is available from a Python API. ANANSE is free and open source research software. If you find it useful please cite our paper: Xu, Q., Georgiou, G., Veenstra, G.J.C., Zhou, H., and van Heeringen, S.J. (2020). ANANSE: An enhancer network-based computational approach for predicting key transcription factors in cell fate determination. https://www.biorxiv.org/","title":"What is ANANSE Network?"},{"location":"#getting-started","text":"The easiest way to install ANANSE is using bioconda on Linux (include Windows Subsystem for Linux ) or Mac. Have a look at these simple examples to get a taste of what is possible. Check out the more detailed tutorials. Full command-line reference can be found here. There\u2019s also an API documentation .","title":"Getting started"},{"location":"#get-help","text":"First, check the FAQ for common issues. The preferred way to get support is through the Github issues page . Finally, you can reach me by mail or via twitter .","title":"Get help"},{"location":"#full-contents","text":"Installation The easiest way to install Alternative installation Input data Genome Motif database Enhancer data Expression data Differential expression data Command-line reference List of tools Input formats Command: ananse binding Command: ananse network Command: ananse influence API documentation Working with binding Class Working with network Class Working with influence Class Examples Command: ananse binding Command: ananse network Command: ananse influence FAQ Sorry, motif prediction tool [X] is not supported I get motifs that have differential scores in gimme maelstrom, however, the number is not different across clusters I have upgraded GimmeMotifs and now it doesn\u2019t find my genome I cannot run gimme index anymore I get \u2018RuntimeError: Invalid DISPLAY variable\u2019 I get a KeyError when running gimme maelstrom Acknowledgments","title":"Full contents"},{"location":"API_documentation/","text":"API document Working with Binding Class The Binding class include all functions used to infer TF-binding site for all enhancer peaks. import pandas as pd import dask.dataframe as dd from ananse import binding gene_bed = \"/data/hg38_genes.bed\" peak_bed = \"data/krt_enhancer.bed\" pfmfile = \"/data/gimme.vertebrate.v5.1.pfm\" A new Binding object bid bid=binding.Binding(genome=\"hg38\", gene_bed= gene_bed, pfmfile=pfmfile) Using clear_peak() function, we can filter the peaks in promoter ranges. filter_bed = bid.clear_peak(peak_bed) The get_PWMScore() function, calculate the motif z-score of all TFs in all peaks. pfm_weight = bid.get_PWMScore(filter_bed) pfm = dd.read_csv(pfm_weight, sep=\"\\t\") Load enhancer peak intensity. peak_weight = bid.get_peakRPKM(filter_bed) peak = dd.read_csv(peak_weight, sep=\"\\t\") Infer the TF-binding score. table=bid.get_binding_score(pfm, peak) The peak_bed file is the enhancer peak file, and \"./\" is the output dir. With run_binding() function, we can infer the binding sites of all TFs in peak_bed enhancer ranges. bid.run_binding(peak_bed,\"./\") Working with Network Class The Network class include all functions used to infer cell type specific gene regulatory network. import pandas as pd import dask.dataframe as dd from ananse import network fin_expression = [\"data/KRT_rep1_TPM.txt\", \"data/KRT_rep2_TPM.txt\"] binding = \"results/binding.txt\" gene_bed = \"/data/hg38_genes.bed\" peak_bed = \"data/krt_enhancer.bed\" pfmfile = \"/data/gimme.vertebrate.v5.1.pfm\" corrfiles = \"expressioncorrelation.txt\" A new Network object net net=network.Network(genome=\"hg38\", gene_bed= gene_bed, pfmfile=pfmfile) Using clear_peak() function, we can filter the peaks in promoter ranges. filter_bed = net.clear_peak(peak_bed) Using get_promoter_dataframe() function to overlap the enhancer with promoter, and using get_gene_dataframe() function to overlap the enhancer with gene. prom = net.get_promoter_dataframe(filter_bed) p = net.get_gene_dataframe(filter_bed) Using weight() function to establish weight function 100 kb up and downstream to the TSS. weight = net.distance_weight() Using aggregate_binding() function to merge binding data with gene. features = net.aggregate_binding(binding, prom, p, weight) Using aggregate_binding() function to establish and merge expression data with features, and using get_correlation() function to establsih and merge expression data with features. expression_file = net.get_expression(fin_expression, features) corr_file = net.get_correlation(corrfiles, features) other = [ expression_file, corr_file, ] featurefile = net.join_features(features, other) Using create_network() function to establish gene regulatory network. net.create_network(featurefile, outfile) Working with influence Class","title":"API documentation"},{"location":"API_documentation/#api-document","text":"","title":"API document"},{"location":"API_documentation/#working-with-binding-class","text":"The Binding class include all functions used to infer TF-binding site for all enhancer peaks. import pandas as pd import dask.dataframe as dd from ananse import binding gene_bed = \"/data/hg38_genes.bed\" peak_bed = \"data/krt_enhancer.bed\" pfmfile = \"/data/gimme.vertebrate.v5.1.pfm\" A new Binding object bid bid=binding.Binding(genome=\"hg38\", gene_bed= gene_bed, pfmfile=pfmfile) Using clear_peak() function, we can filter the peaks in promoter ranges. filter_bed = bid.clear_peak(peak_bed) The get_PWMScore() function, calculate the motif z-score of all TFs in all peaks. pfm_weight = bid.get_PWMScore(filter_bed) pfm = dd.read_csv(pfm_weight, sep=\"\\t\") Load enhancer peak intensity. peak_weight = bid.get_peakRPKM(filter_bed) peak = dd.read_csv(peak_weight, sep=\"\\t\") Infer the TF-binding score. table=bid.get_binding_score(pfm, peak) The peak_bed file is the enhancer peak file, and \"./\" is the output dir. With run_binding() function, we can infer the binding sites of all TFs in peak_bed enhancer ranges. bid.run_binding(peak_bed,\"./\")","title":"Working with Binding Class"},{"location":"API_documentation/#working-with-network-class","text":"The Network class include all functions used to infer cell type specific gene regulatory network. import pandas as pd import dask.dataframe as dd from ananse import network fin_expression = [\"data/KRT_rep1_TPM.txt\", \"data/KRT_rep2_TPM.txt\"] binding = \"results/binding.txt\" gene_bed = \"/data/hg38_genes.bed\" peak_bed = \"data/krt_enhancer.bed\" pfmfile = \"/data/gimme.vertebrate.v5.1.pfm\" corrfiles = \"expressioncorrelation.txt\" A new Network object net net=network.Network(genome=\"hg38\", gene_bed= gene_bed, pfmfile=pfmfile) Using clear_peak() function, we can filter the peaks in promoter ranges. filter_bed = net.clear_peak(peak_bed) Using get_promoter_dataframe() function to overlap the enhancer with promoter, and using get_gene_dataframe() function to overlap the enhancer with gene. prom = net.get_promoter_dataframe(filter_bed) p = net.get_gene_dataframe(filter_bed) Using weight() function to establish weight function 100 kb up and downstream to the TSS. weight = net.distance_weight() Using aggregate_binding() function to merge binding data with gene. features = net.aggregate_binding(binding, prom, p, weight) Using aggregate_binding() function to establish and merge expression data with features, and using get_correlation() function to establsih and merge expression data with features. expression_file = net.get_expression(fin_expression, features) corr_file = net.get_correlation(corrfiles, features) other = [ expression_file, corr_file, ] featurefile = net.join_features(features, other) Using create_network() function to establish gene regulatory network. net.create_network(featurefile, outfile)","title":"Working with Network Class"},{"location":"API_documentation/#working-with-influence-class","text":"","title":"Working with influence Class"},{"location":"command-line_reference/","text":"Command-line reference All the example dataset and result files are able to find at http://mbdata.science.ru.nl/qxu/ananse/ananse.html . Build TF binding network Example: $ ananse binding -r data/krt_enhancer.bed \\ -o results/binding.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -p /data/gimme.vertebrate.v5.1.pfm Required arguments: -r, --enhancers The name of the input enhancer peak file. This should be a BED format file, with 4 columns. The first column is chromosome name, the second and third columns are the start and end point of peak. We recommend all peaks have 200bp. If the peak is not 200bp, we will normize it to 200bp. The fourth column is intensity of the peak, it could be RPKM or equivalent value. This is an example enhancer BED file. -o, --output The name of the output file. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -g, --genome The genome that is used for the gene annotation and the enhancer location. This can be either the name of a genome installed with genomepy , for example hg38 , or the name of a genome FASTA file, for example /data/genomes/hg38/hg38.fa . It is recommended to use a genome installed by genomepy . The default setting is hg19 . -a, --annotation The input 12 columns BED file with gene annotation in your genome version. This is an example BED annotation file of human hg38. -p, --motifs The input Motif file. This is an example Motif file in vertebrate. if provided there should also be a motif2factors.txt file and a factortable.txt file in the same folder. This is an example of motif2factors file. This is an example of factortable file. -f, --filter_promoter Filter promoters, True or False, input should be either 'True' or 'False'. (Default setting: True; if 'True', the function will filtered all promoter peaks (+-2k from TSS) in provided enhancer peaks.). -d, --keep_detail Keep detail files, True or False, input should be either 'True' or 'False'. (Default setting: True). -h, --help Show the help message and exit. Built gene regulatory network Example: $ ananse network -e data/KRT_rep1_TPM.txt data/KRT_rep2_TPM.txt \\ -r data/krt_enhancer.bed \\ -b results/binding.txt \\ -o results/full_features.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -c expressioncorrelation.txt \\ -p ../data/gimme.vertebrate.v5.1.pfm Required arguments: -e, --expression The expression file of your interested cell type or tissue. It could have one or more gene expression file(s). In this file, the 1st column should contain gene name, and a column should be named TPM. This is an example of expression file. -b, --binding The binding network from Build binding network step. One of the example binding network could be found at here . -o, --output The folder to save results, -o is the required arguments. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -g, --genome The genome of your data. For example, hg38. The genome is recommended to download by genomepy . -p, --motifs The input Motif file. This is an example Motif file in vertebrate. if provided there should also be a motif2factors.txt file and a factortable.txt file in the same folder. This is an example of motif2factors file. This is an example of factortable file. -a, --annotation The input 12 columns BED file with gene annotation in your genome version. This is an example BED annotation file of human hg38. -f, --filter_promoter Filter promoters, True or False, input should be either 'True' or 'False'. (Default setting: True; if 'True', the function will filtered all promoter peaks (+-2k from TSS) in provided enhancer peaks.). -c, --corrfiles All gene correlation file, the human gene expression correlation can be found at here . -h, --help Show the help message and exit. Infer TF influence score Example: $ ananse influence -a results/full_network.txt \\ -e data/FB_rep1_TPM.txt \\ -d data/FB2KRT_degenes.csv \\ -o results/FB2KRT.txt \\ -p False Required arguments: -a, --anetwork The network in second cell. It is the result from Built GRN step. One of the example network could be found at here . -d, --degenes The differential expression table between two cells. This is an example of differential expression file. -o, --output The folder to save results, -o is the required arguments. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -s, --edges Specifics the number of top edges (interactions) used. -b, --bnetwork The network in first cell (optional). It is the result from Built GRN step. One of the example network could be found at here . -e, --expression The gene expression in first cell (optional). One or more gene expression file(s), 1st column should contain gene name, and a column should be named TPM. This is an example of expression file. -p, --plot Plot influence. True or False, input should be either 'True' or 'False'. (Default setting: True) -h, --help Show the help message and exit.","title":"Command line reference"},{"location":"command-line_reference/#command-line-reference","text":"All the example dataset and result files are able to find at http://mbdata.science.ru.nl/qxu/ananse/ananse.html .","title":"Command-line reference"},{"location":"command-line_reference/#build-tf-binding-network","text":"Example: $ ananse binding -r data/krt_enhancer.bed \\ -o results/binding.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -p /data/gimme.vertebrate.v5.1.pfm Required arguments: -r, --enhancers The name of the input enhancer peak file. This should be a BED format file, with 4 columns. The first column is chromosome name, the second and third columns are the start and end point of peak. We recommend all peaks have 200bp. If the peak is not 200bp, we will normize it to 200bp. The fourth column is intensity of the peak, it could be RPKM or equivalent value. This is an example enhancer BED file. -o, --output The name of the output file. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -g, --genome The genome that is used for the gene annotation and the enhancer location. This can be either the name of a genome installed with genomepy , for example hg38 , or the name of a genome FASTA file, for example /data/genomes/hg38/hg38.fa . It is recommended to use a genome installed by genomepy . The default setting is hg19 . -a, --annotation The input 12 columns BED file with gene annotation in your genome version. This is an example BED annotation file of human hg38. -p, --motifs The input Motif file. This is an example Motif file in vertebrate. if provided there should also be a motif2factors.txt file and a factortable.txt file in the same folder. This is an example of motif2factors file. This is an example of factortable file. -f, --filter_promoter Filter promoters, True or False, input should be either 'True' or 'False'. (Default setting: True; if 'True', the function will filtered all promoter peaks (+-2k from TSS) in provided enhancer peaks.). -d, --keep_detail Keep detail files, True or False, input should be either 'True' or 'False'. (Default setting: True). -h, --help Show the help message and exit.","title":"Build TF binding network"},{"location":"command-line_reference/#built-gene-regulatory-network","text":"Example: $ ananse network -e data/KRT_rep1_TPM.txt data/KRT_rep2_TPM.txt \\ -r data/krt_enhancer.bed \\ -b results/binding.txt \\ -o results/full_features.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -c expressioncorrelation.txt \\ -p ../data/gimme.vertebrate.v5.1.pfm Required arguments: -e, --expression The expression file of your interested cell type or tissue. It could have one or more gene expression file(s). In this file, the 1st column should contain gene name, and a column should be named TPM. This is an example of expression file. -b, --binding The binding network from Build binding network step. One of the example binding network could be found at here . -o, --output The folder to save results, -o is the required arguments. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -g, --genome The genome of your data. For example, hg38. The genome is recommended to download by genomepy . -p, --motifs The input Motif file. This is an example Motif file in vertebrate. if provided there should also be a motif2factors.txt file and a factortable.txt file in the same folder. This is an example of motif2factors file. This is an example of factortable file. -a, --annotation The input 12 columns BED file with gene annotation in your genome version. This is an example BED annotation file of human hg38. -f, --filter_promoter Filter promoters, True or False, input should be either 'True' or 'False'. (Default setting: True; if 'True', the function will filtered all promoter peaks (+-2k from TSS) in provided enhancer peaks.). -c, --corrfiles All gene correlation file, the human gene expression correlation can be found at here . -h, --help Show the help message and exit.","title":"Built gene regulatory network"},{"location":"command-line_reference/#infer-tf-influence-score","text":"Example: $ ananse influence -a results/full_network.txt \\ -e data/FB_rep1_TPM.txt \\ -d data/FB2KRT_degenes.csv \\ -o results/FB2KRT.txt \\ -p False Required arguments: -a, --anetwork The network in second cell. It is the result from Built GRN step. One of the example network could be found at here . -d, --degenes The differential expression table between two cells. This is an example of differential expression file. -o, --output The folder to save results, -o is the required arguments. Optional arguments: -n, --ncore Specifies the number of threads to use during analysis. -s, --edges Specifics the number of top edges (interactions) used. -b, --bnetwork The network in first cell (optional). It is the result from Built GRN step. One of the example network could be found at here . -e, --expression The gene expression in first cell (optional). One or more gene expression file(s), 1st column should contain gene name, and a column should be named TPM. This is an example of expression file. -p, --plot Plot influence. True or False, input should be either 'True' or 'False'. (Default setting: True) -h, --help Show the help message and exit.","title":"Infer TF influence score"},{"location":"examples/","text":"Examples git clone https://github.com/vanheeringen-lab/ANANSE.git cd ANANSE/test/ Build TF binding network $ ananse binding -r data/krt_enhancer.bed \\ -o results/binding.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -p /data/gimme.vertebrate.v5.1.pfm Built gene regulatory network $ ananse network -e data/KRT_rep1_TPM.txt data/KRT_rep2_TPM.txt \\ -r data/krt_enhancer.bed \\ -b results/binding.txt \\ -o results/full_features.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -c expressioncorrelation.txt \\ -p ../data/gimme.vertebrate.v5.1.pfm Infer TF influence score $ ananse influence -a results/full_network.txt \\ -e data/FB_rep1_TPM.txt \\ -d data/FB2KRT_degenes.csv \\ -o results/FB2KRT.txt \\ -p False","title":"Examples"},{"location":"examples/#examples","text":"git clone https://github.com/vanheeringen-lab/ANANSE.git cd ANANSE/test/","title":"Examples"},{"location":"examples/#build-tf-binding-network","text":"$ ananse binding -r data/krt_enhancer.bed \\ -o results/binding.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -p /data/gimme.vertebrate.v5.1.pfm","title":"Build TF binding network"},{"location":"examples/#built-gene-regulatory-network","text":"$ ananse network -e data/KRT_rep1_TPM.txt data/KRT_rep2_TPM.txt \\ -r data/krt_enhancer.bed \\ -b results/binding.txt \\ -o results/full_features.txt \\ -a /data/hg38_genes.bed \\ -g hg38 \\ -c expressioncorrelation.txt \\ -p ../data/gimme.vertebrate.v5.1.pfm","title":"Built gene regulatory network"},{"location":"examples/#infer-tf-influence-score","text":"$ ananse influence -a results/full_network.txt \\ -e data/FB_rep1_TPM.txt \\ -d data/FB2KRT_degenes.csv \\ -o results/FB2KRT.txt \\ -p False","title":"Infer TF influence score"},{"location":"input_data/","text":"Prepare data Genome When you need run ANANSE in your sample, genome file is necessary. We recommand you download your genome file with genomepy , which is a python package could install genome easily. In ANANSE, for each genome, we need: * A genome fasta file * A 12 columns BED file with genome annotation. When you would like to insall the genome with genomepy , you could fellow this commands, which will download both fasta file and bed file. conda create -n genomepy python=3 conda activate genomepy conda install genomepy=0.7.2 conda activate genompy # install hg38 genome genomepy install GRCh38 NCBI -a Motif database By default ANANSE uses a non-redundant, clustered database of known vertebrate motifs: gimme.vertebrate.v5.0 . These motifs come from CIS-BP (http://cisbp.ccbr.utoronto.ca/) and other sources. Large-scale benchmarks using ChIP-seq peaks show that this database shows good performance and should be a good default choice. If you would like to use your own motif database, please makesure your database include following two files: Motif file #GM.5.0.Sox.0001 M1911_1.02;;M3916_1.02;;M5846_1.02;;M6471_1.02;;M6478_1.02;;MA0084.1_SRY;;MA1152.1_SOX15;;SOX12;;SOX12_1 Sox12_bulyk_sc09-primary;;SOX15_1 Sox15_bulyk_sc09-primary;;SOX18_1 Sox18_bulyk_sc09-primary;;SOX30;;SOX30_1 Sox30_bulyk_sc09-primary;;SOX7_1 Sox7_bulyk_sc09-primary;;SOX9_1 SOX9_transfac_M00410;;SOX9_3 SOX9_jolma_DBD_M136;;SRY;;SRY_3 SRY_jaspar_MA0084.1 >GM.5.0.Sox.0001 0.7213 0.0793 0.1103 0.0891 0.9259 0.0072 0.0062 0.0607 0.0048 0.9203 0.0077 0.0672 0.9859 0.0030 0.0030 0.0081 0.9778 0.0043 0.0128 0.0051 0.1484 0.0050 0.0168 0.8299 #GM.5.0.Homeodomain.0001 M4064_1.02;;TGIF1;;TGIF1_1 TGIF_transfac_M00418;;TGIF1_HUMAN.H11MO.0.A >GM.5.0.Homeodomain.0001 0.8870 0.0000 0.0178 0.0951 0.1156 0.2033 0.6629 0.0181 0.0017 0.7452 0.0809 0.1722 0.0011 0.0003 0.0003 0.9983 0.0026 0.0141 0.9721 0.0111 0.0000 0.0189 0.0054 0.9758 0.0006 0.9983 0.0006 0.0006 0.9170 0.0140 0.0046 0.0644 0.2228 0.2421 0.3300 0.2051 0.3621 0.1054 0.2208 0.3116 0.5727 0.0104 0.1741 0.2428 Motif2factors file Motif Factor Evidence Curated GM.5.0.Sox.0001 SRY JASPAR Y GM.5.0.Sox.0001 SOX9 Transfac Y GM.5.0.Sox.0001 Sox9 Transfac N GM.5.0.Sox.0001 SOX9 SELEX Y GM.5.0.Sox.0001 Sox9 SELEX N The motif file should end with .pfm , and motif2factors file should have the same name with motif file and end with motif2factors.txt . The defaule gimme.vertebrate.v5.0 file can be found here: gimme.vertebrate.v5.0.pfm and gimme.vertebrate.v5.0.motif2factors.txt .","title":"Input data"},{"location":"input_data/#prepare-data","text":"","title":"Prepare data"},{"location":"input_data/#genome","text":"When you need run ANANSE in your sample, genome file is necessary. We recommand you download your genome file with genomepy , which is a python package could install genome easily. In ANANSE, for each genome, we need: * A genome fasta file * A 12 columns BED file with genome annotation. When you would like to insall the genome with genomepy , you could fellow this commands, which will download both fasta file and bed file. conda create -n genomepy python=3 conda activate genomepy conda install genomepy=0.7.2 conda activate genompy # install hg38 genome genomepy install GRCh38 NCBI -a","title":"Genome"},{"location":"input_data/#motif-database","text":"By default ANANSE uses a non-redundant, clustered database of known vertebrate motifs: gimme.vertebrate.v5.0 . These motifs come from CIS-BP (http://cisbp.ccbr.utoronto.ca/) and other sources. Large-scale benchmarks using ChIP-seq peaks show that this database shows good performance and should be a good default choice. If you would like to use your own motif database, please makesure your database include following two files: Motif file #GM.5.0.Sox.0001 M1911_1.02;;M3916_1.02;;M5846_1.02;;M6471_1.02;;M6478_1.02;;MA0084.1_SRY;;MA1152.1_SOX15;;SOX12;;SOX12_1 Sox12_bulyk_sc09-primary;;SOX15_1 Sox15_bulyk_sc09-primary;;SOX18_1 Sox18_bulyk_sc09-primary;;SOX30;;SOX30_1 Sox30_bulyk_sc09-primary;;SOX7_1 Sox7_bulyk_sc09-primary;;SOX9_1 SOX9_transfac_M00410;;SOX9_3 SOX9_jolma_DBD_M136;;SRY;;SRY_3 SRY_jaspar_MA0084.1 >GM.5.0.Sox.0001 0.7213 0.0793 0.1103 0.0891 0.9259 0.0072 0.0062 0.0607 0.0048 0.9203 0.0077 0.0672 0.9859 0.0030 0.0030 0.0081 0.9778 0.0043 0.0128 0.0051 0.1484 0.0050 0.0168 0.8299 #GM.5.0.Homeodomain.0001 M4064_1.02;;TGIF1;;TGIF1_1 TGIF_transfac_M00418;;TGIF1_HUMAN.H11MO.0.A >GM.5.0.Homeodomain.0001 0.8870 0.0000 0.0178 0.0951 0.1156 0.2033 0.6629 0.0181 0.0017 0.7452 0.0809 0.1722 0.0011 0.0003 0.0003 0.9983 0.0026 0.0141 0.9721 0.0111 0.0000 0.0189 0.0054 0.9758 0.0006 0.9983 0.0006 0.0006 0.9170 0.0140 0.0046 0.0644 0.2228 0.2421 0.3300 0.2051 0.3621 0.1054 0.2208 0.3116 0.5727 0.0104 0.1741 0.2428 Motif2factors file Motif Factor Evidence Curated GM.5.0.Sox.0001 SRY JASPAR Y GM.5.0.Sox.0001 SOX9 Transfac Y GM.5.0.Sox.0001 Sox9 Transfac N GM.5.0.Sox.0001 SOX9 SELEX Y GM.5.0.Sox.0001 Sox9 SELEX N The motif file should end with .pfm , and motif2factors file should have the same name with motif file and end with motif2factors.txt . The defaule gimme.vertebrate.v5.0 file can be found here: gimme.vertebrate.v5.0.pfm and gimme.vertebrate.v5.0.motif2factors.txt .","title":"Motif database"},{"location":"installation/","text":"Installation ANANSE runs on Linux. On Windows 10 it will run fine using the Windows Subsystem for Linux . Mac OSX should work and is included in the build test. However, as I don't use it myself, unexpected issues might pop up. Let me know, so I can try to fix it. The easiest way to install The preferred way to install ANANSE is by using conda . Activate the bioconda channel if you haven't used bioconda before. You only have to do this once. $ conda config --add channels defaults $ conda config --add channels bioconda $ conda config --add channels conda-forge You can install ANANSE with one command. In the current environment: $ conda install ananse Or create a specific environment: $ conda create -n ananse python=3 ananse # Activate the environment before you use ANANSE $ conda activate ananse ANANSE only supports Python 3. Don't forget to activate the environment with source activate ananse whenever you want to use ANANSE. Installation successful? Good. Have a look at the configuration<configuration> section. Alternative installation","title":"Installation"},{"location":"installation/#installation","text":"ANANSE runs on Linux. On Windows 10 it will run fine using the Windows Subsystem for Linux . Mac OSX should work and is included in the build test. However, as I don't use it myself, unexpected issues might pop up. Let me know, so I can try to fix it.","title":"Installation"},{"location":"installation/#the-easiest-way-to-install","text":"The preferred way to install ANANSE is by using conda . Activate the bioconda channel if you haven't used bioconda before. You only have to do this once. $ conda config --add channels defaults $ conda config --add channels bioconda $ conda config --add channels conda-forge You can install ANANSE with one command. In the current environment: $ conda install ananse Or create a specific environment: $ conda create -n ananse python=3 ananse # Activate the environment before you use ANANSE $ conda activate ananse ANANSE only supports Python 3. Don't forget to activate the environment with source activate ananse whenever you want to use ANANSE. Installation successful? Good. Have a look at the configuration<configuration> section.","title":"The easiest way to install"},{"location":"installation/#alternative-installation","text":"","title":"Alternative installation"}]}