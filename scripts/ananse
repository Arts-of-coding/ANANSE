#!/usr/bin/env python
# Copyright (c) 2013-2019 Quan Xu <qxuchn@gmail.com>
#
# This module is free software. You can redistribute it and/or modify it under
# the terms of the MIT License, see the file COPYING included with this
# distribution.

import sys
import argparse
from ananse import commands, __version__
from genomepy import Genome


class NegateAction(argparse.Action):
    def __call__(self, parser, ns, values, option):
        setattr(ns, self.dest, "include" in option)


if __name__ == "__main__":
    usage = "%(prog)s [-h] <command> [options]"
    description = f"ANANSE: ANalysis Algorithm for Networks Specified by Enhancers"
    epilog = """
    commands:
        binding     infer TF binding sites in enhancer peaks
        network     built network for each sample
        influence   infer key TFs between two samples
    """
    parser = argparse.ArgumentParser(
        usage=usage,
        description=description,
        epilog=epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument('-v', '--version', action='version', version=f'%(prog)s v{__version__}')
    subparsers = parser.add_subparsers()

    # enhancer_binding.py
    p = subparsers.add_parser("binding", add_help=False)  # help added manually (more control)
    group = p.add_argument_group("required arguments")
    group.add_argument(
        "-g",
        "--genome",
        required=True,
        dest="genome",
        help="path to the genome fasta used to align the bams and peaks to",
        metavar="",
    )
    group.add_argument(
        "-p",
        "--peaks",
        required=True,
        dest="peakfiles",
        help="one or more BED format files with putative enhancer regions (e.g. narrowPeak, broadPeak)",
        metavar="",
        nargs='*',
    )
    group.add_argument(
        "-b",
        "--bams",
        required=True,
        dest="bams",
        help="one or more BAM format files where reads mark enhancer activity (H3K27Ac/p300 ChIP-seq or ATAC-seq)",
        metavar="",
        nargs='*',
    )
    group = p.add_argument_group("optional arguments")
    group.add_argument(
        "-o",
        "--outdir",
        dest="outdir",
        help="directory where you wish to store the output (default: ./ANANSE_binding)",
        metavar="",
        default="./ANANSE_binding",
    )
    group.add_argument(
        "-w",
        "--width",
        dest="peak_width",
        help="peakfiles are resized to this width (default: 200)",
        metavar="",
        default=200,
    )
    group.add_argument(
        "-d",
        "--dist-func",
        dest="dist_func",
        help="bam reads are normalized to the selected distribution (default: an empirical distribution)",
        metavar="",
        default="peak_rank_file_dist",
    )
    group.add_argument(
        "-i",
        "--pfmfile",
        dest="pfmfile",
        help="pfm file of the transcription factors to search for (default gimme.vertebrate.v5.0)",
        metavar="",
        default=None,
    )
    group.add_argument(
        "-c",
        "--curation",
        dest="curation_filter",
        help="True = curated TFs, False = no curated TFs, None = all TFs (default: None)",
        metavar="",
        default=None,
    )
    group.add_argument(
        "-t",
        "--tf-list",
        dest="tf_list",
        help="optional file with single column TF names",
        metavar="",
        default=None,
    )
    group.add_argument(
        "-l",
        "--whitelist",
        dest="whitelist",
        help="True = use tf_list as a whitelist. False = use tf_list as a blacklist (default: True)",
        metavar="",
        default=True,
    )
    group.add_argument(
        "-m",
        "--model",
        dest="model",
        help="pickle with classification model to use (default: dream)",
        metavar="",
        default=None,
    )
    group.add_argument(
        "-n",
        "--ncore",
        dest="ncore",
        help="number of cores to use  (default: 1)",
        metavar="",
        type=int,
        default=1,
    )
    group.add_argument(
        "-f",
        "--force",
        dest="force",
        help="overwrite earlier intermediate data? (default: False)",
        action="store_true",
        default=False,
    )
    group.add_argument(
        "-k",
        "--keep",
        dest="keep_intermediates",
        help="keep intermediate data after completion? (default: True)",
        action="store_false",
        default=True,
    )
    group.add_argument(
        "-s",
        "--silent",
        dest="verbose",
        help="operate silently? (default: False)",
        action="store_false",
        default=True,
    )

    group.add_argument(
        "-h", "--help", action="help", help="show this help message and exit"
    )
    p.set_defaults(func=commands.binding)

    # network.py
    p = subparsers.add_parser("network", add_help=False)
    group = p.add_argument_group("required arguments")
    group.add_argument(
        "-b", "--binding", dest="binding", help="All TFs binding file", metavar="FILE",
    )
    group.add_argument(
        "-e",
        "--expression",
        dest="fin_expression",
        help="Expression scores",
        metavar="FILE",
        nargs="*",
    )
    group.add_argument(
        "-o",
        "--output",
        required=True,
        dest="outfile",
        help="Output file",
        metavar="FILE",
        default=None,
    )
    group = p.add_argument_group("optional arguments")
    group.add_argument(
        "-g", "--genome", dest="genome", help="Genome", metavar="NAME", default="hg38",
    )
    group.add_argument(
        "-a",
        "--annotation",
        dest="annotation",
        help="Gene annotation in BED12 format",
        metavar="BED",
    )
    group.add_argument(
        "-c",
        "--corrfiles",
        dest="corrfiles",
        help="Files with correlation",
        metavar="FILE",
        nargs="*",
    )
    group.add_argument(
        "-n", "--ncore", dest="ncore", help="Number of core used", type=int,
    )
    group.add_argument(
        "--include-promoter",
        "--exclude-promoter",
        default=False,
        help="Include or exclude promoter peaks (<= TSS +/- 2kb) in network inference. By default promoter peaks are excluded.",
        dest="include_promoter",
        action=NegateAction,
        nargs=0,
    )
    group.add_argument(
        "--include-enhancer",
        "--exclude-enhancer",
        default=True,
        help="Include or exclude enhancer peaks (> TSS +/- 2kb) in network inference. By default enhancer peaks are included.",
        dest="include_enhancer",
        action=NegateAction,
        nargs=0,
    )
    group.add_argument(
        "-h", "--help", action="help", help="show this help message and exit"
    )

    # p.add_argument(
    #     "-r",
    #     "--enhancers",
    #     required=True,
    #     dest="fin_rpkm",
    #     help="BED file with RPKM on the 4th column",
    #     metavar="FILE",
    # )
    # p.add_argument(
    #     "-f",
    #     "--filter_promoter",
    #     dest="fpomoter",
    #     help="Filter promoters, True or False, input should be either 'True' or 'False'.",
    #     metavar="NAME",
    #     type=ast.literal_eval,
    #     default=True,
    # )

    # This not used currently
    # group.add_argument(
    #     "-i",
    #     "--impute",
    #     dest="impute",
    #     help="Impute missing values",
    #     default=False,
    #     action="store_true",
    # )

    p.set_defaults(func=commands.network)

    # # network.py
    # p = subparsers.add_parser("network")
    # p.add_argument(
    #     "-f",
    #     "--interaction",
    #     dest="features",
    #     help="HDF5 file with features",
    #     metavar="FILE",
    #     default=None,
    #     required=True,
    # )
    # p.add_argument(
    #     "-o",
    #     "--outfile",
    #     required=True,
    #     dest="outfile",
    #     help="Output file",
    #     metavar="FILE",
    #     default=None,
    # )
    # p.add_argument(
    #     "-i",
    #     "--impute",
    #     dest="impute",
    #     help="Impute missing values",
    #     default=False,
    #     action="store_true",
    # )
    # p.set_defaults(func=commands.network)

    # influence.py
    p = subparsers.add_parser("influence", add_help=False)

    group = p.add_argument_group("required arguments")
    group.add_argument(
        "-t",
        "--target",
        dest="Gaf",
        help="network in second cell",
        metavar="FILE",
        default=None,
    )
    group.add_argument(
        "-d", "--degenes", dest="expression", help="DE genes file", metavar="FILE",
    )
    group.add_argument(
        "-o",
        "--outfile",
        required=True,
        dest="outfile",
        help="Output file",
        metavar="FILE",
        default=None,
    )
    group = p.add_argument_group("optional arguments")
    group.add_argument(
        "-s",
        "--source",
        dest="Gbf",
        help="network in first cell",
        metavar="FILE",
        default=None,
    )
    group.add_argument(
        "-i",
        "--edges",
        dest="edges",
        help="Number of top edges used",
        type=int,
        default=100000,
    )
    group.add_argument(
        "-e",
        "--expression",
        dest="fin_expression",
        help="Expression scores in first cell",
        metavar="FILE",
    )
    group.add_argument(
        "-p",
        "--plot",
        dest="plot",
        help="Create influence score plot.",
        action="store_true",
        default=False,
    )
    group.add_argument(
        "-n", "--ncore", dest="ncore", help="Number of core used", type=int,
    )
    group.add_argument(
        "-h", "--help", action="help", help="show this help message and exit"
    )
    p.set_defaults(func=commands.influence)

    if "help" in sys.argv:
        parser.print_help()
    else:
        args = parser.parse_args()

        if hasattr(args, "genome"):
            if args.genome is not None:
                try:
                    Genome(args.genome)
                except Exception:
                    print(
                        "Genome not found. Have you installed your genome with genomepy?"
                    )
                    print("See https://github.com/vanheeringen-lab/genomepy for details.")
                    print("Alternatively, you can specify a FASTA file.")
                    exit(1)

        if args.func.__name__.startswith("run_"):
            args.func(**vars(args))
        else:
            args.func(args)
