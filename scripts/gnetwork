#!/usr/bin/env python 
# Copyright (c) 2013-2016 Quan Xu <qxuchn@gmail.com>
#
# This module is free software. You can redistribute it and/or modify it under 
# the terms of the MIT License, see the file COPYING included with this 
# distribution.
import os
import sys
import argparse
from grns.config import MotifConfig, BG_TYPES, BED_VALID_BGS
from grns import commands, __version__
from grns.utils import check_genome

if __name__ == "__main__":

    config = MotifConfig()
    params = config.get_default_params()
    default_pwm_file = os.path.join(config.get_motif_dir(), params["motif_db"])
    default_pwm = params["motif_db"]
    
    description = """
    gnetwork v{0}
    """.format(__version__)
    
    epilog = """   
    commands:
        binding     infer TF binding sites in enhancer peaks
        interaction link TF binding sites to genes
        network     built network for each sample
        influence   infer key TFs between two samples
    
    type `gnetwork <command> -h` for more details
    """
    
    usage = "%(prog)s [-h] <subcommand> [options]"
    
    parser = argparse.ArgumentParser(
                                    usage=usage, 
                                    description=description, 
                                    epilog=epilog,
                                    formatter_class=argparse.RawDescriptionHelpFormatter
                                    )
    subparsers = parser.add_subparsers()#title='subcommands', metavar="<command>")
    
    # binding.py
    p = subparsers.add_parser('binding')

    p.add_argument("-p", "--pwmfile",
        dest="pwmfile",
        help="PWM",
        metavar="FILE",
        default=None)
    p.add_argument("-r", "--fin_rpkm",
        required=True,
        dest="fin_rpkm",
        help="BED file with RPKM on the 4th column",
        metavar="FILE")
    p.add_argument("-a", "--annotation",
        dest="annotation",
        help="Gene annotation in BED12 format",
        metavar="BED")
    p.add_argument("-g", "--genome",
        dest="genome",
        help="Genome",
        metavar="GENOME",
        default="hg19")
    p.add_argument("-o", "--outdir",
        required=True,
        dest="outdir",
        help="Output directory",
        metavar="DIR",
        default=None)
    p.add_argument("-f", "--filter_promoter",
        dest="fpomoter",
        help="Filter promoters, True or False, input should be either 'True' or 'False'.",
        metavar="NAME",
        type=ast.literal_eval,
        default=True)
    p.add_argument("-d", "--keep_detail",
        dest="detail",
        help="Keep detail files, True or False, input should be either 'True' or 'False'.",
        metavar="NAME",
        type=ast.literal_eval,
        default=True)
    p.set_defaults(func=commands.binding)

    
    if len(sys.argv) == 1:
        parser.print_help()
    else:
        if len(sys.argv) == 2:
            print("\033[93mtype `grns {} -h` for more details\033[0m\n".format(sys.argv[-1]))
        args = parser.parse_args()
        
        if hasattr(args, "genome"):
            if args.genome is not None:
                if not check_genome(args.genome):
                    print("Genome not found. Have you installed your genome with genomepy?")
                    print("See https://github.com/simonvh/genomepy for details.")
                    print("Alternatively, you can specify a FASTA file.")
                    exit(1)
        
        args.func(args)
